[{"/home/adityesh/Health-Tracker-Frontend/src/index.js":"1","/home/adityesh/Health-Tracker-Frontend/src/App.js":"2","/home/adityesh/Health-Tracker-Frontend/src/socket.js":"3","/home/adityesh/Health-Tracker-Frontend/src/components/Auth/Login.js":"4","/home/adityesh/Health-Tracker-Frontend/src/components/Auth/Register.js":"5","/home/adityesh/Health-Tracker-Frontend/src/components/Dashboard/UserDash.js":"6","/home/adityesh/Health-Tracker-Frontend/src/components/Dashboard/DoctorDash.js":"7","/home/adityesh/Health-Tracker-Frontend/src/components/Landing.js":"8","/home/adityesh/Health-Tracker-Frontend/src/context/context.js":"9","/home/adityesh/Health-Tracker-Frontend/src/utils/userActions.js":"10","/home/adityesh/Health-Tracker-Frontend/src/components/Auth/RegisterDoc.js":"11","/home/adityesh/Health-Tracker-Frontend/src/components/Auth/LoginDoc.js":"12"},{"size":169,"mtime":1610036852831,"results":"13","hashOfConfig":"14"},{"size":2835,"mtime":1610300581704,"results":"15","hashOfConfig":"14"},{"size":118,"mtime":1610002113062,"results":"16","hashOfConfig":"14"},{"size":3193,"mtime":1610205244611,"results":"17","hashOfConfig":"14"},{"size":3680,"mtime":1610204391369,"results":"18","hashOfConfig":"14"},{"size":3669,"mtime":1610205805926,"results":"19","hashOfConfig":"14"},{"size":1834,"mtime":1610296003182,"results":"20","hashOfConfig":"14"},{"size":1262,"mtime":1610295128682,"results":"21","hashOfConfig":"14"},{"size":104,"mtime":1610037038013,"results":"22","hashOfConfig":"14"},{"size":1729,"mtime":1610295957070,"results":"23","hashOfConfig":"14"},{"size":3832,"mtime":1610300817587,"results":"24","hashOfConfig":"14"},{"size":2926,"mtime":1610300703586,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ubd3mr",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/adityesh/Health-Tracker-Frontend/src/index.js",[],["54","55"],"/home/adityesh/Health-Tracker-Frontend/src/App.js",[],"/home/adityesh/Health-Tracker-Frontend/src/socket.js",[],"/home/adityesh/Health-Tracker-Frontend/src/components/Auth/Login.js",["56"],"import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport { LoginContext } from '../../context/context';\nimport { loginUser } from '../../utils/userActions';\nimport './Login.css';\nimport '../Landing.css';\n\nconst LoginSchema = yup.object().shape({\n    email: yup.string().email(\"*Not a valid email\").required('*Email cannot be empty'),\n    password: yup.string().required('*Password cannot be empty'),\n});\n\nexport default function Login() {\n    const history = useHistory();\n    const { isLoggedIn, setLoggedIn } = useContext(LoginContext);\n    \n    const handleLogin = (values) => {\n        const {email, password} = values;\n        loginUser(email, password)\n        .then(message => {\n            console.log(message);\n            localStorage.setItem('user', JSON.stringify(message));\n            setLoggedIn(true);\n            history.push('/user');\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    return (\n        \n                <div className=\"login-page\">\n                \n                <Formik\n                    validationSchema={LoginSchema}\n                    initialValues={{ email: '', password: '' }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        handleLogin(values);\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                        resetForm\n                    }) => (\n\n                        <form onSubmit={handleSubmit} className=\"form-container\">\n                            <div className=\"head-container\">\n                                <p>User Login</p>\n                            </div>\n                            <div className=\"input-container\">\n                                <input type=\"email\" onChange={handleChange('email')} value={values.email} placeholder=\"Enter email address\" />\n                                <span>{errors.email}</span>\n                            </div>\n                            <div className=\"input-container\">\n                                <input type=\"password\" onChange={handleChange('password')} value={values.password} placeholder=\"Enter password\" />                            <span></span>\n                                <span>{errors.password}</span>\n                            </div>\n\n                            <div className=\"btn-container\">\n                                \n                                <button className=\"btn register\" onClick={() => history.push('/register')}>Sign up</button>\n                                <button className=\"btn submit\" type=\"submit\">Login</button>\n                                <button className=\"btn reset\" onClick={() => resetForm()}>Reset</button>\n                            </div>\n\n\n                        </form>\n\n                    )}\n\n                </Formik>\n            </div>\n            \n    )\n}","/home/adityesh/Health-Tracker-Frontend/src/components/Auth/Register.js",[],"/home/adityesh/Health-Tracker-Frontend/src/components/Dashboard/UserDash.js",["57","58","59"],"import './UserDash.css';\nimport {socket} from '../../socket';\nimport React, { useEffect, useState, useContext } from 'react';\nimport { Line } from '@reactchartjs/react-chart.js';\nimport { useHistory } from 'react-router-dom';\nimport {LoginContext }from '../../context/context';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nconst UserDash = () => {\n  const history = useHistory();\n  const [maxTemp, setMaxTemp] = useState('');\n  const [maxPulse, setMaxPulse] = useState('');\n  const { isLoggedIn, setLoggedIn } = useContext(LoginContext);\n  const [data, setData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'Body Temperature',\n        data: [],\n        fill: true,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n    ],\n  });\n\n  const [pulseData, setPulseData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'Body Pulse',\n        data: [],\n        fill: true,\n        backgroundColor: 'rgb(0,72,186)',\n        borderColor: 'rgb(0,72,186)',\n      }\n    ],\n  });\n\n  const notify = (message) => {\n    toast.warn(message, {\n      position: toast.POSITION.TOP_RIGHT,\n      autoClose : 3000\n    });\n  };\n  \n  const notifyPulse = (message) => {\n    toast.error(message, {\n      position: toast.POSITION.TOP_RIGHT,\n      autoClose : 3000\n    });\n  }\n\n  \n  \n  const options = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n    maintainAspectRatio : false\n  }\n\n  useEffect(() => {\n    \n    if(!isLoggedIn) {\n      // User not logged in\n      history.push('/login');\n    }\n  }, [])\n\n\n  useEffect(() => {\n    \n    socket.on('Temp', (posts) => {\n      \n      const xAxis = posts.reverse().map((post) => {\n          \n          return new Date(post.createdAt).toLocaleTimeString();\n      })\n      const yAxis = posts.reverse().map(post => {\n        \n        return post.bodyTemp;\n      });\n      let currentMaxTemp = maxTemp;\n      if(Math.max(...yAxis) >= currentMaxTemp) {\n        setMaxTemp(Math.max(...yAxis));\n        \n      }\n\n      const yAxisPulse = posts.reverse().map(post => {\n        return post.bodyPulse;\n      });\n      let currentMaxPulse = maxPulse;\n      if(Math.max(...yAxisPulse) >= currentMaxPulse) {\n        setMaxPulse(Math.max(...yAxisPulse));\n      }\n      \n\n      setData({\n        labels: xAxis,\n        datasets: [\n          {\n            label: 'Body Temperature',\n            data: yAxis,\n            fill: false,\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgba(255, 99, 132, 0.2)',\n          },\n        ],\n      });\n\n      setPulseData({\n        labels: xAxis,\n        datasets: [\n          {\n            label: 'Body Pulse',\n            data: yAxisPulse,\n            fill: false,\n            backgroundColor: 'rgb(0,72,186)',\n            borderColor: 'rgb(0,72,186, 0.2)',\n          },\n        ],\n      });\n\n      \n    })\n\n    return () => {\n      socket.removeAllListeners();\n      socket.disconnect();\n    }\n  },[]);\n\n\n  useEffect(() => {\n    if(maxTemp >= 38) {\n      notify(\"Alert, Body Temp \" + maxTemp + '℃');\n    }\n\n    if(maxPulse >= 90) {\n      notifyPulse(\"Alert, High Body Pulse - \" + maxPulse);\n    }\n\n  }, [maxTemp, maxPulse]);\n\n  return (\n    <div className=\"user-page\">\n      <div className=\"temp-graph graph\">\n        <Line data={data} options={options} />\n      </div>\n      <div className=\"pulse-graph graph\">\n        <Line data={pulseData} options={options}/>\n      </div>\n      \n      <ToastContainer/>\n    </div>\n  )\n  \n  \n  \n}\n\nexport default UserDash;\n","/home/adityesh/Health-Tracker-Frontend/src/components/Dashboard/DoctorDash.js",[],"/home/adityesh/Health-Tracker-Frontend/src/components/Landing.js",["60","61"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Landing.css';\nexport default function Landing() {\n    const history = useHistory();\n    return(\n        <>\n        \n        <div className=\"landing-page\">\n            \n            <div className=\"left-container\">\n                \n                <h2>Smart Health Tracker <i className=\"fa fa-medkit\" aria-hidden=\"false\"></i></h2>\n                <div className=\"login-container\">\n                    <p>Log in to your account</p> \n                    <a className=\"horizontal\"  onClick={() => history.push('/login')}><span className=\"text\">Login</span></a>\n                </div>\n                <div className=\"or-container\">\n                    <p>or</p>\n                </div>\n                \n                 <div className=\"register-container\">\n                 <p>Sign up for an account</p>\n                 <a className=\"horizontal\" onClick={() => history.push('/register')}><span className=\"text\">Sign Up</span></a>\n                 </div>\n                \n                \n\n                \n            </div>\n            <div className=\"right-container\">\n                <h3>Smart Health Tracker</h3>\n            </div>\n            \n        </div>\n        </>\n    ) \n}","/home/adityesh/Health-Tracker-Frontend/src/context/context.js",[],"/home/adityesh/Health-Tracker-Frontend/src/utils/userActions.js",[],"/home/adityesh/Health-Tracker-Frontend/src/components/Auth/RegisterDoc.js",["62","63","64","65"],"/home/adityesh/Health-Tracker-Frontend/src/components/Auth/LoginDoc.js",["66","67","68","69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":17,"column":13,"nodeType":"77","messageId":"78","endLine":17,"endColumn":23},{"ruleId":"75","severity":1,"message":"79","line":13,"column":23,"nodeType":"77","messageId":"78","endLine":13,"endColumn":34},{"ruleId":"80","severity":1,"message":"81","line":75,"column":6,"nodeType":"82","endLine":75,"endColumn":8,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":138,"column":5,"nodeType":"82","endLine":138,"endColumn":7,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":16,"column":21,"nodeType":"88","endLine":16,"endColumn":87},{"ruleId":"86","severity":1,"message":"87","line":24,"column":18,"nodeType":"88","endLine":24,"endColumn":86},{"ruleId":"75","severity":1,"message":"89","line":7,"column":10,"nodeType":"77","messageId":"78","endLine":7,"endColumn":22},{"ruleId":"75","severity":1,"message":"90","line":21,"column":17,"nodeType":"77","messageId":"78","endLine":21,"endColumn":21},{"ruleId":"75","severity":1,"message":"91","line":21,"column":23,"nodeType":"77","messageId":"78","endLine":21,"endColumn":28},{"ruleId":"75","severity":1,"message":"92","line":21,"column":30,"nodeType":"77","messageId":"78","endLine":21,"endColumn":38},{"ruleId":"75","severity":1,"message":"93","line":6,"column":10,"nodeType":"77","messageId":"78","endLine":6,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":17,"column":13,"nodeType":"77","messageId":"78","endLine":17,"endColumn":23},{"ruleId":"75","severity":1,"message":"79","line":17,"column":25,"nodeType":"77","messageId":"78","endLine":17,"endColumn":36},{"ruleId":"75","severity":1,"message":"91","line":20,"column":16,"nodeType":"77","messageId":"78","endLine":20,"endColumn":21},{"ruleId":"75","severity":1,"message":"92","line":20,"column":23,"nodeType":"77","messageId":"78","endLine":20,"endColumn":31},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","'setLoggedIn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["96"],"React Hook useEffect has missing dependencies: 'maxPulse' and 'maxTemp'. Either include them or remove the dependency array.",["97"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'registerUser' is defined but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","'loginUser' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [history, isLoggedIn]",{"range":"102","text":"103"},"Update the dependencies array to be: [maxPulse, maxTemp]",{"range":"104","text":"105"},[1709,1711],"[history, isLoggedIn]",[3106,3108],"[maxPulse, maxTemp]"]